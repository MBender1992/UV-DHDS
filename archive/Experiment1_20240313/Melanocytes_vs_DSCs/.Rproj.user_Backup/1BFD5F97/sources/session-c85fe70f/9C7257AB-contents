##<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<HEAD>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
##*********************************************************************************************************
## load packages
library(tidyverse)
library(DESeq2)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(apeglm)
library(PoiClaClu)
library(corto)
library(pathfindR)

## load sample sheet
sampleSheet <- read_csv("Data/SampleSheet.csv")

## replace some values with \n for newlines
sampleSheet$Value2 <- str_replace_all(sampleSheet$Value2, "\\_", "\\_\n")
sampleSheet$Value2 <- str_replace(sampleSheet$Value2, "\\_\n", "\\_")
sampleSheet$Value3 <- str_replace(sampleSheet$Value3, "Stran", "Stran-\n")
sampleSheet$Value3 <- str_replace(sampleSheet$Value3, "Prep", "Prep-\n")
sampleSheet$Value4 <- str_replace(sampleSheet$Value4, "AUDI", "AUDI\n")
sampleSheet$Value4 <- str_replace(sampleSheet$Value4, "Adapter", "Adapter-\n")

## load marker genes
markerGenes <- read_csv2("Data/marker_genes.csv")

## extract marker genes from csv
McMarkerGenes    <- markerGenes[markerGenes$TYPE == "Melanocytes",]$SYMBOL
DscMarkerGenes   <- markerGenes[markerGenes$TYPE == "DSCs",]$SYMBOL
FibroMarkerGenes <- markerGenes[markerGenes$TYPE == "Fibroblasts",]$SYMBOL
SkinMarkerGenes  <- c(McMarkerGenes, DscMarkerGenes, FibroMarkerGenes)
MelanomaMarkerGenes <- markerGenes[str_detect(markerGenes$TYPE, "[Mm]elanoma"),]

## load data
dat <- read_csv("Data/DSC_vs_MC_genes_counts.csv")

## assign count matrix
counts <- as.matrix(dat[,-1])
rownames(counts) <- NULL
colnames(counts) <- NULL

## define column data
colData <- data.frame(cell_type= factor(c(rep("DSC",5), rep("Melanocytes", 5))),
                     row.names=c("DSC_27_23", "DSC_28_23", "DSC_29_23", "DSC_30_23", "DSC_31_23", 
                                 "MC_27_23", "MC_28_23", "MC_29_23", "MC_30_23", "MC_31_23"))

## include technical replicates with collapseReplicates

## construct summarized experiment object
se <- SummarizedExperiment(assays=list(counts = counts),
                     colData=colData)

## add gene IDs as rownames
rownames(se) <- str_remove(unlist(dat[,1]), "\\..+$")

## store results from DRAGEN analysis
DragenRes <- read_csv("Data/DE_results_DRAGEN.csv")
DragenRes <- head(DragenRes, 30)

##*********************************************************************************************************
## Set thresholds and variable names

## always specify this filter criterion to take the desired difference into account in significance testing
pThres            <- 0.05
lfcThres          <- round(log2(1.5),4)
minimumCount      <- 10 # Here we perform pre-filtering to keep only rows that have a count of at least 10 for a 
# minimal number of samples. The count of 10 is a reasonable choice for bulk RNA-seq.
smallestGroupSize <- 5  # A recommendation for the minimal number of samples is to specify the smallest group     
# size,e.g. here there are 5 samples in each group.
factor1 <- "cell_type" # Variable of interests
factor2 <- NULL # placeholder in case we want to adjust for a second factor. For more than 2 factors the workflow needs to be adjusted.

## define contrast
contrast <- ekbSeq::make_design_formula(fct1 = factor1, fct2 = factor2)
dds <- DESeqDataSet(se, design = contrast)

## extract number of reads per sample
nread <- colSums(assay(dds))
names(nread) <- str_replace(names(nread), "\\_", "\n")

## remove genes with low counts
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
keep <- NULL

## extract number of reads per sample
nreadFiltered <- colSums(assay(dds))
names(nreadFiltered) <- str_replace(names(nreadFiltered), "\\_", "\n")

##*********************************************************************************************************
## Exploratory data analysis

##****** 
##*Poisd

## calculate Poisson distances and define parameters for graphical representation
poisd <- PoissonDistance(t(counts(dds)))
samplePoisDistMatrix <- as.matrix(poisd$dd)
rownames(samplePoisDistMatrix) <- rownames(colData(se))
colnames(samplePoisDistMatrix) <- NULL
colorsPoisd <- colorRampPalette(rev(RColorBrewer::brewer.pal(9, "Blues")) )(255)

##******
##*Transform data

## variance stabilized transformation
vsd <- vst(dds, blind = FALSE)
## rlog transformation (regularized log transformation)
rld <- rlog(dds, blind = FALSE)
## estimate size factors
dds <- estimateSizeFactors(dds)


##*********************************************************************************************************
## Differential expression analysis

## run DESeq
dds <- DESeq(dds)

##******
##*Extract results and shrink lfcs
res <- results(dds, lfcThreshold = lfcThres, alpha = pThres)

## shrink LFCs
resShrunk <- lfcShrink(dds, res = res, coef="cell_type_Melanocytes_vs_DSC", type="apeglm")

##******
##*Annotate data and subset significant genes
anno <- AnnotationDbi::select(org.Hs.eg.db, rownames(res), 
                              columns=c("ENSEMBL", "ENTREZID", "SYMBOL", "GENENAME"), 
                              keytype="ENSEMBL")
## remove duplicated ENSEMBL ID entries
anno <- anno %>% filter(!duplicated(ENSEMBL))

## adding ENSEMBL gene ID as a column in significant differentially expression gene table.
allRes <- cbind(ENSEMBL = rownames(resShrunk), resShrunk)
allRes <- if(dim(anno)[1] == dim(allRes)[1]){
  left_join(as.data.frame(allRes), anno)
} else {
  stop("Dimensions of annotation object and result object are different.")
}

## subset significant results
sigRes <- subset(allRes, padj < pThres)


##******
## Extract genes with high dispersion
indDisp <- which(mcols(dds, use.names = TRUE)$dispersion > 1)
rldHighDisp <-assay(rld)[indDisp,]

highDispGenes <- allRes[allRes$ENSEMBL %in% rownames(rldHighDisp),]$SYMBOL
highDispGenes <- highDispGenes[!is.na(highDispGenes)]

##******
## define corto object and master regulators
load(system.file("extdata","centroids.rda", package="corto", mustWork=TRUE))

## define expression matrix object which serves as input to the corto function
expMat <- assay(rld)
expMat <- expMat %>% as.data.frame() %>% rownames_to_column("ENSEMBL") %>%
  left_join(allRes[,c("ENSEMBL", "SYMBOL")]) %>% dplyr::select(-ENSEMBL) %>%
  filter(!duplicated(SYMBOL) & !is.na(SYMBOL)) %>% column_to_rownames("SYMBOL") %>%
  as.matrix()

## Master regulators without known melanocyte factors
regulon <- corto(expMat,centroids=centroids,p = 0.0001, nthreads=2,nbootstraps=10,verbose=TRUE)
masterRegNew <- mra(expMat[,6:10], expMat[,1:5], regulon = regulon)

## Master regulators with known melanocyte factors
centroids <- c(centroids, SkinMarkerGenes)
centroids[!duplicated(centroids)]
regulon <- corto(expMat,centroids=centroids,p = 0.0001, nthreads=2,nbootstraps=10,verbose=TRUE)
masterRegMarkers <- mra(expMat[,6:10], expMat[,1:5], regulon = regulon)


##*********************************************************************************************************
## calculate cross table for comparison of melanocyte and melanoma gene expression

## function to calculate cross table
calc_cross_tab <- function(type, lfc = "greater"){
  if(lfc == "greater"){
    n <- sum(allRes[allRes$SYMBOL %in% MelanomaMarkerGenes[MelanomaMarkerGenes$TYPE == type,]$SYMBOL, ]$log2FoldChange>0)
    p <- mean(allRes[allRes$SYMBOL %in% MelanomaMarkerGenes[MelanomaMarkerGenes$TYPE == type,]$SYMBOL, ]$log2FoldChange>0)
  } else if(lfc == "lesser") {
    n <- sum(allRes[allRes$SYMBOL %in% MelanomaMarkerGenes[MelanomaMarkerGenes$TYPE == type,]$SYMBOL, ]$log2FoldChange<0)
    p <- mean(allRes[allRes$SYMBOL %in% MelanomaMarkerGenes[MelanomaMarkerGenes$TYPE == type,]$SYMBOL, ]$log2FoldChange<0)
  } else {
    stop("Please specify whether lfc greater or lesser than 0 should be compared.")
  }
  paste(n, " (",round(p*100,1), "%)", sep = "")
}

## set up cross table
crossTab <- data.frame(matrix(nrow = 2, ncol = 2))
rownames(crossTab) <- c("Melanocytes_up", "Melanocytes_down")
colnames(crossTab) <- c("Melanoma_up", "Melanoma_down")

## populate cross table
crossTab[1,1] <- calc_cross_tab(type = "Melanoma_up", lfc = "greater")
crossTab[2,2] <- calc_cross_tab(type = "Melanoma_down", lfc = "lesser")
crossTab[1,2] <- calc_cross_tab(type = "Melanoma_down", lfc = "greater")
crossTab[2,1] <- calc_cross_tab(type = "Melanoma_up", lfc = "lesser")

##*********************************************************************************************************
## setup pathfindR input

## define pathfindR input and remove NAs
pathfindR_input <- allRes %>% 
  column_to_rownames("ENSEMBL") %>%
  select(SYMBOL, log2FoldChange, padj) %>%
  na.omit()

## make analysis with KEGG pathways (default)
outputDf <- run_pathfindR(pathfindR_input, output_dir="/Results/PathfindR")

## make list of KEGG pathway plots
input_processed <- input_processing(pathfindR_input)
gg_list <- visualize_terms(
  result_df = output_df,
  input_processed = input_processed,
  is_KEGG_result = TRUE
)

## melanocytes are treated as cases throughout the analysis
cases <- colnames(dds)[str_detect(colnames(dds),"MC")]

## setup expression matrix as input for pathfindRs score_term function
expMat <-  assay(rld)[rownames(assay(rld)) %in% rownames(pathfindR_input),] %>%
  as.data.frame() %>%
  rownames_to_column("ENSEMBL") %>%  
  inner_join(anno[,c("ENSEMBL", "SYMBOL")]) %>% 
  select(-ENSEMBL) %>% 
  filter(!duplicated(SYMBOL) & !is.na(SYMBOL)) %>%  
  column_to_rownames("SYMBOL") %>%
  as.matrix()

## Cluster pathfindR data
outputClustered <- cluster_enriched_terms(outputDf, plot_dend = FALSE, plot_clusters_graph = FALSE)
representativeDf <- outputClustered[outputClustered$Status == "Representative", ]


##******
## Save data if anything has been changed (default is false)
ekbSeq::save_res(save = FALSE, results = sigRes, results.name = "Results/melanocytes_vs_dscs_significant_genes", rdata.name = "DSC_NGS", rm.batch = factor2)



outputDf <- run_pathfindR(pathfindR_input, output_dir="/Results/PathfindR", gene_sets = "GO-BP")

outputDf$Term_Description[str_detect(outputDf$Term_Description, "[Mm]elan|[Dd]evel|[Dd]iff|[Pp]igment")]


# gg_list$hsa04512 +
#   scale_fill_gradient2(low = "blue", mid = "grey", high = "red") +
#   scale_colour_manual(values = "black")

scoreMatrix <- score_terms(
  enrichment_table = outputDf[str_detect(outputDf$Term_Description, "[Mm]elan|[Dd]evel|[Dd]iff|[Pp]igment|[Nn]eur|[Ss]ynapse|[Rr]epair|[Rr]esponse"),],
  exp_mat = expMat,
  cases = cases,
  use_description = TRUE, # default FALSE
  label_samples = FALSE, # default = TRUE
  case_title = "Melanocytes", # default = "Case"
  control_title = "DSCs", # default = "Control"
  low = "blue", # default = "green"
  mid = "#fffde4", # default = "black"
  high = "red" # default = "red"
)


outputClustered <- cluster_enriched_terms(outputDf, plot_dend = FALSE, plot_clusters_graph = FALSE)
representativeDf <- outputClustered[outputClustered$Status == "Representative", ]

scoreMatrix <- score_terms(
  enrichment_table = representativeDf,
  exp_mat = expMat,
  cases = cases,
  use_description = TRUE, # default FALSE
  label_samples = FALSE, # default = TRUE
  case_title = "Melanocytes", # default = "Case"
  control_title = "DSCs", # default = "Control"
  low = "blue", # default = "green"
  mid = "#fffde4", # default = "black"
  high = "red" # default = "red"
)



### add unique genes
### add gene families
### add Pathview


# 
# library(circlize)
# library(ComplexHeatmap)
# library(simplifyEnrichment)
# library(clusterProfiler)
# library(wordcloud)
# library(wordcloud2)
# 
# 
# enrich_go <- function(gene.list, ont, type = "ORA") {
#   if (type == "ORA") {
#     ego <- enrichGO(names(gene.list), OrgDb = "org.Hs.eg.db", ont = ont, readable = TRUE)
#   } else if (type == "GSE") {
#     ego <- gseGO(
#       geneList = gene.list, OrgDb = "org.Hs.eg.db", ont = ont, minGSSize = 5,
#       maxGSSize = 500, pvalueCutoff = 0.05, verbose = FALSE
#     )
#   } else {
#     stop("Please specifiy either ORA for overrepresentation analysis or GSE for gene set enrichment.")
#   }
#   ego2 <- simplify(ego, cutoff = 0.7, by = "p.adjust", select_fun = min)
#   return(ego2)
#   ego
# }
# 
# geneListDown <- unlist(sigRes[sigRes$log2FoldChange < 0, ]$log2FoldChange)
# names(geneListDown) <- sigRes[sigRes$log2FoldChange < 0, ]$ENTREZID
# 
# db <- "org.Hs.eg.db"
# simThres <- 0.8
# 
# resEnrich <- enrich_go(gene.list = geneListDown, ont = "ALL")
# 
# geneListUp <- unlist(sigRes[sigRes$log2FoldChange > 0, ]$log2FoldChange)
# names(geneListUp) <- sigRes[sigRes$log2FoldChange > 0, ]$ENTREZID
# 
# resEnrich2 <- enrich_go(gene.list = geneListUp, ont = "ALL")
# 
# 
# cluster <- ifelse(sigRes$log2FoldChange<0, 1, 2)
# go_list <- list(`1`= resEnrich$ID, `2` =  resEnrich2$ID)
# 
# heatmapFontsize <- 18
# 
# # Heatmap of all DE genes
# matAll <- assay(rld)[sigRes$ENSEMBL, ]
# ## scale matrix
# datScaled <- matAll %>%
#   t() %>%
#   scale() %>%
#   t()
# 
# 
# Heatmap(datScaled, show_row_names = FALSE) +
#   rowAnnotation(go = anno_word_cloud_from_GO(cluster, go_list,exclude_words = "gs", max_words = 60))
# 
# 
# 
# 
# 
# geneRatio <- data.frame(name = resEnrich$Description, geneRatio = resEnrich$GeneRatio, padj = resEnrich$p.adjust) %>%
#   tidyr::separate(geneRatio, c("n", "total")) %>%
#   mutate(geneRatio = as.numeric(n)/as.numeric(total)) %>%
#   mutate(rank = geneRatio * (-log(padj)))
# 
# set.seed(1234)
# wordcloud(words = resEnrich$Description, freq = geneRatio$rank, min.freq = median(geneRatio$rank), scale=c(1.2, .6),
#           max.words = 40, random.order=FALSE, rot.per=0.35,
#           colors=c("grey70", "grey60", "grey60", "grey40", "grey30", "grey10", "black"))
# 
# 
# geneRatio <- data.frame(name = resEnrich2$Description, geneRatio = resEnrich2$GeneRatio, padj = resEnrich2$p.adjust) %>%
#   tidyr::separate(geneRatio, c("n", "total")) %>%
#   mutate(geneRatio = as.numeric(n)/as.numeric(total)) %>%
#   mutate(rank = geneRatio * (-log(padj)))
# 
# set.seed(1234)
# wordcloud(words = resEnrich2$Description, freq = geneRatio$rank, min.freq = median(geneRatio$rank), scale=c(1.2, .55),
#           max.words=40, random.order=FALSE, rot.per=0.2,
#           colors=c("grey70", "grey60", "grey60", "grey40", "grey30", "grey10", "black"))